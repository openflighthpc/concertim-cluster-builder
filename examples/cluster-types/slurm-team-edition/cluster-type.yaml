# Brief description of the purpose of the cluster.
title: "SLURM: Team Edition"

# Fuller description of the purpose of the cluster and how to use it.  You can
# use markdown here.
description: |
  A small collaborative environment, great for teams running short projects.

# The kind or type of this cluster template.
kind: heat

# The components that compose this cluster type definition.
#
# `name`: either the name of a file in the `components` subdirectory without
# the `.yaml` extension; or the absolute path to a file including extension.
#
# `optional`: whether this component is optional.
components:
  - name: network
  - name: gateway
    user_data:
      name: gateway
      write_files:
        - cloudinit.slurm-multinode
        - shared-storage-mount
        - passwords.slurm-multinode
        - post-apply-tweaks.slurm-multinode
  - name: infra
    user_data:
      name: infra
      write_files:
        - cloudinit.infra-multinode
  - name: nodes
    user_data:
      name: node
      write_files:
        - cloudinit.compute-multinode


# parameter_groups defines the parameter groups for this cluster type.
#
# It is similar to the `parameter_groups` attribute used in HOT with a single
# additional attribute `optional`.
#
# The `optional` attribute specifies that a check box or similar should be
# rendered for that parameter group. The parameters contained in the parameter
# group should only be displayed to the user if that check box is selected.
# Cluster builder will use the value of that checkbox to determine which
# optional components to include.
#
# `optional.label`   - the label to display for an optional parameter group.
# `optional.default` - whether the group is selected or not by default.
# `optional.name`    - the name of the component that will be included only if this group is selected.
parameter_groups:
  - label: "Cluster parameters"
    description: "Configuration for parameters common across the cluster"
    parameters:
      - clustername
      - solo-image
      - key_name

  - label: "Network settings"
    description: "Configuration for the external and internal cluster networks"
    parameters:
      - external-network
      - network-cidr-pri

  - label: "Gateway parameters"
    description: "Parameters for configuring the gateway"
    parameters:
      - gateway-pri-ip
      - gateway-flavour
      - storage-size

  - label: "Infrastructure node parameters"
    description: "Parameters for configuring infra01 if requested"
    parameters:
      - infra-flavour

  - label: "Compute node parameters"
    description: "Parameters for configuring compute nodes if requested"
    parameters:
      - node-flavour
      - node-count


# Any of the parameters defined in `parameters.yaml` can be hardcoded here. If
# they are hardcoded, the value provided here will be passed to Heat when
# launching the cluster.  It will not be possible for the user to override
# these values.
hardcoded_parameters:
  external-network: public1
  network-cidr-pri: '10.100.0.0/16'
  gateway-pri-ip: '10.100.0.101'
  solo-image: "Flight Solo 2024.1"
  node-count: 5


# parameter_overrides allows for overriding any of the parameters loaded from
# any component for this particular cluster type.
#
# This might be useful for defining, say, a generic node-count parameter in
# the component template library.
#
#     node-count:
#       type: number
#       label: Number of Nodes
#       constraints:
#         - range: { min: 1 }
#
# Three cluster types could be created from this, say, small, medium and large.
# Each cluster type could override the default and constraints suitable
# for that cluster type.  E.g., the small might specify the following:
#
#     parameter_overrides:
#       node-count:
#         default: 5
#         constraints:
#           - range: { min: 1, max: 5 }
#
# This would allow the user to launch a multi-node cluster, limited to 5 nodes,
# whilst still allowing them to reduce the cost consumption if they wanted to.
#
# All values specified here replace the values specified in the template
# library, so when overriding the constraints you need to specify every desired
# constraint for that parameter.
#
# If a parameter also appears in hardcoded_parameters, that hardcoded value
# will be used without the user having the option to adjust it.  The hardcoded
# value will need to be consistent with any constraints set here or in
# the template library.
parameter_overrides:
  node-count:
    default: 5
    constraints:
      - range: { min: 1, max: 5 }
  storage-size:
    default: 1024
    constraints:
      - range: { min: 16, max: 4096 }
